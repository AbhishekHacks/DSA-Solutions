/*Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.
*/

//Time Complexity -- O(M*N)

class Solution {
public:
    string multiply(string num1, string num2) {

        int n=num1.size();
        int m=num2.size();

        if(num1=="0"||num2=="0"){
            return "0";
        }

        //maintian a list to store the string generated by multiplying each character of num2 with each character of num1
        vector<string>output;

        //final result
        string sum;
        
        //reverse both the string
        reverse(num1.begin(),num1.end());
        reverse(num2.begin(),num2.end());

        for(int i=0;i<m;i++){
            int a = num2[i]-'0';
            string temp;

            //carry 
            int carry=0;

            for(int j=0;j<n;j++){
                int b = num1[j]-'0';
                int mul=(a*b)+carry;
                char res = (char)((mul%10)+'0');
                carry = mul/10;
                temp.push_back(res);
            }
            if(carry>0){
                temp.push_back((char)(carry+'0'));
            }
            output.push_back(temp);
        }

        //adding zeros
        int leftzeros = 0;
        for(int i=0;i<m;i++){
            string temp="";
            for(int i=1;i<=leftzeros;i++){
                temp.push_back('0');
            }
            output[i]=temp+output[i];

            //increment number of zeros
            leftzeros++;
        }

        //scenario is that every string in the output vector starts at index 0
        int daurana = output[m-1].size();
        int carry=0;
        for(int i=0;i<daurana;i++){
            int add = 0;
            for(int j=0;j<m;j++){
                string temp = output[j];
                if(i>=temp.size()){
                    continue;
                }
                add+=(temp[i]-'0');
            }
            add+=carry;
            char res = (char)((add%10)+'0');
            carry = add/10;
            sum.push_back(res);
        }

        //lastly add the remaining carry into sum
        while(carry>0){
            char r = (char)((carry%10)+'0');
            sum.push_back(r);
            carry = carry/10;
        }

        //return the reverse of sum
        reverse(sum.begin(),sum.end());
        return sum;
    }
};
